# Production Dockerfile for Rust Tour with embedded assets
FROM node:20-alpine AS web-builder

# Install build dependencies for native modules like node-pty
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    musl-dev

# Set working directory for web build
WORKDIR /app/web

# Copy web package files
COPY web/package*.json ./
RUN npm ci

# Copy web source and build
COPY web/ ./
RUN npm run build

# Rust build stage using pre-built base image with cargo-chef
FROM ghcr.io/ghanithan/rust-tour/base:alpine-latest AS chef
WORKDIR /app

FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS rust-builder
# All build dependencies are already in the base image
WORKDIR /app

# Build dependencies first (this will be cached)
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source code (dependencies are already built)
COPY . .

# Copy built web assets to expected location for embedding
COPY --from=web-builder /app/web/dist ./web-server/web-dist

# Build the application (dependencies are cached)
RUN cargo build --release --package rust-tour

# Copy solutions if they exist (optional)
RUN mkdir -p ./solutions/

# Final runtime stage - Rust 1.84 without cargo-chef overhead
FROM rust:1.84-alpine

# Install additional runtime tools
RUN apk add --no-cache \
    ca-certificates \
    bash \
    wget \
    curl \
    vim \
    nano \
    tree \
    less \
    htop \
    procps

# Create non-root user
RUN addgroup -g 1001 -S rustuser && \
    adduser -S -D -H -u 1001 -h /app -s /bin/bash -G rustuser rustuser

# Set working directory
WORKDIR /app

# Copy the built binary (with embedded assets)
COPY --from=rust-builder /app/target/release/rust-tour /usr/local/bin/rust-tour

# Copy exercise content and scripts
COPY --from=rust-builder --chown=rustuser:rustuser /app/exercises ./exercises
COPY --from=rust-builder --chown=rustuser:rustuser /app/scripts ./scripts

# Create progress directory
RUN mkdir -p /app/progress && chown rustuser:rustuser /app/progress

# Switch to non-root user
USER rustuser

# Expose the port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

# Set environment variables
ENV RUST_LOG=info
ENV RUST_TOUR_HOST=0.0.0.0
ENV RUST_TOUR_PORT=3000

# Start command
CMD ["rust-tour"]