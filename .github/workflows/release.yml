name: Release Build

on:
  push:
    branches: [main]
    tags: ['v*']
  repository_dispatch:
    types: [release-build]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      exercises-only: ${{ steps.filter.outputs.exercises-only }}
      should-build: ${{ steps.filter.outputs.should-build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: filter
        run: |
          # For repository_dispatch events, always build (release trigger)
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "Repository dispatch event - always build for releases"
            echo "exercises-only=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this is a chore commit that should be skipped
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "branch" ]]; then
            COMMIT_MESSAGE=$(git log -1 --pretty=%s)
            echo "Commit message: $COMMIT_MESSAGE"
            if [[ "$COMMIT_MESSAGE" =~ ^chore: ]]; then
              echo "Skipping build for chore commit"
              echo "exercises-only=false" >> $GITHUB_OUTPUT
              echo "should-build=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Get the list of changed files
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, compare with the previous commit
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              # Initial commit or force push, build everything
              echo "exercises-only=false" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            fi
          else
            # For pull requests or other events
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Check if all changes are in exercises folder
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files detected"
            echo "exercises-only=false" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Check if ALL changed files are in the exercises folder
            NON_EXERCISE_CHANGES=$(echo "$CHANGED_FILES" | grep -v '^exercises/' || true)
            
            if [ -z "$NON_EXERCISE_CHANGES" ]; then
              echo "All changes are in the exercises folder - skipping builds"
              echo "exercises-only=true" >> $GITHUB_OUTPUT
              echo "should-build=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected outside exercises folder - proceeding with builds"
              echo "Non-exercise changes:"
              echo "$NON_EXERCISE_CHANGES"
              echo "exercises-only=false" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            fi
          fi

  build-web:
    name: Build Web Frontend
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.should-build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Build web frontend
        run: |
          cd web
          npm ci
          npm run build

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-assets
          path: web/dist/
          retention-days: 1

  build-binaries:
    name: Build Release Binaries
    needs: [check-changes, build-web]
    runs-on: ${{ matrix.os }}
    if: |
      needs.check-changes.outputs.should-build == 'true' &&
      (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools for Linux ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: web/dist/

      - name: Build Rust binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package rust-tour

      - name: Create release archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="rust-tour.exe"
            ARCHIVE_NAME="rust-tour-${{ matrix.target }}.zip"
            7z a $ARCHIVE_NAME target/${{ matrix.target }}/release/$BINARY_NAME
          else
            BINARY_NAME="rust-tour"
            ARCHIVE_NAME="rust-tour-${{ matrix.target }}.tar.gz"
            tar -czf $ARCHIVE_NAME -C target/${{ matrix.target }}/release $BINARY_NAME
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-tour-${{ matrix.target }}
          path: rust-tour-${{ matrix.target }}.*

  build-and-publish:
    name: Build and Publish Release Images
    needs: [check-changes, build-web]
    runs-on: ubuntu-latest
    if: |
       needs.check-changes.outputs.should-build == 'true' &&
       (github.event_name == 'push' || github.event_name == 'repository_dispatch')
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: web/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "file=Dockerfile.prod" >> $GITHUB_OUTPUT
            echo "Using production Dockerfile with embedded assets for release"
          else
            echo "file=Dockerfile" >> $GITHUB_OUTPUT
            echo "Using development Dockerfile for main branch"
          fi

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, extract version from payload
            VERSION="${{ github.event.client_payload.version }}"
            echo "Repository dispatch detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
            echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT
            echo "patch=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For tag pushes, extract version directly from ref
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag push detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
            echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT
            echo "patch=$VERSION" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, no version (development build)
            echo "Development build - no version tag"
            echo "version=" >> $GITHUB_OUTPUT
            echo "major=" >> $GITHUB_OUTPUT
            echo "minor=" >> $GITHUB_OUTPUT
            echo "patch=" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag only for releases (production)
            type=raw,value=latest,enable=${{ steps.version.outputs.version != '' }}
            # Main branch latest for development
            type=raw,value=main-latest,enable=${{ github.ref == 'refs/heads/main' && steps.version.outputs.version == '' }}
            # Full version with v prefix
            type=raw,value=v${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            # Full version without v prefix
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            # Major.minor version  
            type=raw,value=${{ steps.version.outputs.minor }},enable=${{ steps.version.outputs.version != '' }}
            # Major version
            type=raw,value=${{ steps.version.outputs.major }},enable=${{ steps.version.outputs.version != '' }}
            # SHA for traceability
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Rust Tour
            org.opencontainers.image.description=Interactive Rust learning platform
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.vendor=Rust Tour
            org.opencontainers.image.licenses=MIT OR Apache-2.0

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ steps.dockerfile.outputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test release image
        run: |
          echo "Testing release image..."
          
          # Test the built image (use first tag from metadata)
          IMAGE_TAG="${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
          docker run --rm -d \
            --name rust-tour-release-test \
            -p 3002:3000 \
            $IMAGE_TAG
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:3002/health || exit 1
          echo "Health check passed"
          
          # Test main page
          curl -f http://localhost:3002/ || exit 1
          echo "Main page accessible"
          
          # Cleanup
          docker stop rust-tour-release-test
          
          echo "Release image $IMAGE_TAG tested successfully"


  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    needs: [check-changes, build-web, build-binaries]
    if: |
      needs.check-changes.outputs.should-build == 'true' &&
      (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: web/dist/

      - name: Prepare web assets for packaging
        run: |
          # Copy web assets to web-server/web-dist for cargo packaging
          mkdir -p web-server/web-dist
          cp -r web/dist/* web-server/web-dist/

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --package rust-tour --allow-dirty

  attach-binaries:
    name: Attach Binaries to Release
    runs-on: ubuntu-latest
    needs: [check-changes, build-binaries, build-and-publish]
    if: |
      needs.check-changes.outputs.should-build == 'true' &&
      (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, extract version from payload
            VERSION="${{ github.event.client_payload.version }}"
            echo "Repository dispatch detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For tag pushes, extract version directly from ref
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag push detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, no version (development build)
            echo "Development build - no version tag"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Update GitHub Release with binaries
        uses: softprops/action-gh-release@v1
        if: steps.version.outputs.version != ''
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: artifacts/**/*
          body: |
            ## Installation Options

            ### Docker (Recommended)
            ```bash
            docker run -d -p 3000:3000 -v $(pwd)/progress:/app/progress ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
            ```

            ### Cargo
            ```bash
            cargo install rust-tour
            ```

            ### Binary Downloads
            Download the appropriate binary for your platform from the assets below.

      - name: Publish Release
        if: steps.version.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Looking for draft release v${{ steps.version.outputs.version }}..."
          
          # First, check if the tag exists
          TAG_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/v${{ steps.version.outputs.version }}")
          
          echo "Tag existence check: HTTP $TAG_EXISTS"
          
          # Find the draft release
          RELEASE_ID=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r ".[] | select(.tag_name==\"v${{ steps.version.outputs.version }}\" and .draft==true) | .id")
          
          if [ -n "$RELEASE_ID" ]; then
            echo "Found draft release ID: $RELEASE_ID"
            
            # Get the current release details
            CURRENT_RELEASE=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID")
            
            echo "Current release draft status: $(echo "$CURRENT_RELEASE" | jq -r '.draft')"
            echo "Current release tag: $(echo "$CURRENT_RELEASE" | jq -r '.tag_name')"
            
            echo "Publishing release..."
            
            # Publish the release (only change draft status, don't modify tag_name)
            RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              -d '{"draft": false, "prerelease": false}')
            
            # Extract HTTP code and response body
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n-1)
            
            # Check if successful
            if [ "$HTTP_CODE" = "200" ] && echo "$RESPONSE_BODY" | jq -e '.draft == false' > /dev/null 2>&1; then
              echo "✅ Release v${{ steps.version.outputs.version }} published successfully!"
              echo "Release is now visible at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
            else
              echo "⚠️ Failed to publish release. HTTP Code: $HTTP_CODE"
              echo "Response:"
              echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
              
              # If it's a 422 with tag already exists, check if release is already published
              if [ "$HTTP_CODE" = "422" ]; then
                echo "Checking if release is already published..."
                PUBLISHED_CHECK=$(curl -s \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.version }}")
                
                if echo "$PUBLISHED_CHECK" | jq -e '.draft == false' > /dev/null 2>&1; then
                  echo "✅ Release v${{ steps.version.outputs.version }} is already published"
                  exit 0
                fi
              fi
              
              exit 1
            fi
          else
            echo "⚠️ No draft release found for v${{ steps.version.outputs.version }}"
            echo "This might be a re-run or the release was already published."
            
            # Check if release already exists and is published
            PUBLISHED_RELEASE=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.version }}" | \
              jq -r 'select(.draft==false) | .id')
            
            if [ -n "$PUBLISHED_RELEASE" ]; then
              echo "✅ Release v${{ steps.version.outputs.version }} is already published"
            else
              echo "❌ No release found for v${{ steps.version.outputs.version }}"
              exit 1
            fi
          fi

  update-documentation:
    name: Update Release Documentation
    needs: [check-changes, build-and-publish]
    if: |
      needs.check-changes.outputs.should-build == 'true' &&
      (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, extract version from payload
            VERSION="${{ github.event.client_payload.version }}"
            echo "Repository dispatch detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For tag pushes, extract version directly from ref
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag push detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, no version (development build)
            echo "Development build - no version tag"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Update docker-compose.ghcr.yml with latest version
        run: |
          sed -i 's|ghcr.io/ghanithan/rust-tour:.*|ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}|' docker-compose.ghcr.yml
          
          # Also update latest reference in comments
          sed -i 's|# - latest.*|# - latest (v${{ steps.version.outputs.version }})|' docker-compose.ghcr.yml

      - name: Commit documentation updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No documentation changes needed"
          else
            git add docker-compose.ghcr.yml
            git commit -m "docs: update GHCR references to v${{ steps.version.outputs.version }}"
            git push origin main
          fi

  release-summary:
    name: Release Summary
    needs: [check-changes, build-and-publish]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # For repository_dispatch events, extract version from payload
            VERSION="${{ github.event.client_payload.version }}"
            echo "Repository dispatch detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For tag pushes, extract version directly from ref
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag push detected: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, no version (development build)
            echo "Development build - no version tag"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Generate release summary
        run: |
          # Check if builds were skipped
          if [[ "${{ needs.check-changes.outputs.should-build }}" == "false" ]]; then
            echo "## Build Skipped - Exercises Only Changes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The release workflow was triggered but no builds were performed because all changes were in the exercises folder." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This is expected behavior to save CI resources when only exercise content is updated." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Release build summary
            echo "## Release v${{ steps.version.outputs.version }} Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-publish.result }}" == "success" ]; then
              echo "### Release Build Complete" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:latest\` (production)" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Binaries:** Attached to GitHub release" >> $GITHUB_STEP_SUMMARY
              echo "**Cargo:** Published to crates.io" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Release Build Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 3000:3000 -v \$(pwd)/progress:/app/progress ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            # Main branch build summary
            echo "## Development Build Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-publish.result }}" == "success" ]; then
              echo "### Main Branch Docker Image Updated" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:main-latest\` (development latest)" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:main-${GITHUB_SHA:0:7}\` (specific commit)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Build Type:** Fast development build with separate web assets" >> $GITHUB_STEP_SUMMARY
              echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Development Build Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Try Latest Development Version" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 3000:3000 -v \$(pwd)/progress:/app/progress ghcr.io/ghanithan/rust-tour:main-latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi