name: Release Build

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_run:
    workflows: ["Create Release"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Build web frontend
        run: |
          cd web
          npm ci
          npm run build

      - name: Build Rust binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package rust-tour

      - name: Create release archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="rust-tour.exe"
            ARCHIVE_NAME="rust-tour-${{ matrix.target }}.zip"
            7z a $ARCHIVE_NAME target/${{ matrix.target }}/release/$BINARY_NAME
          else
            BINARY_NAME="rust-tour"
            ARCHIVE_NAME="rust-tour-${{ matrix.target }}.tar.gz"
            tar -czf $ARCHIVE_NAME -C target/${{ matrix.target }}/release $BINARY_NAME
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-tour-${{ matrix.target }}
          path: rust-tour-${{ matrix.target }}.*

  build-and-publish:
    name: Build and Publish Release Images
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "file=Dockerfile.prod" >> $GITHUB_OUTPUT
            echo "Using production Dockerfile with embedded assets for release"
          else
            echo "file=Dockerfile" >> $GITHUB_OUTPUT
            echo "Using development Dockerfile for main branch"
          fi

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT
          echo "patch=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for releases (overwrites previous latest)
            type=raw,value=latest
            # Full semver version
            type=semver,pattern=v{{version}}
            # Major.minor version  
            type=semver,pattern={{major}}.{{minor}}
            # Major version
            type=semver,pattern={{major}}
            # SHA for traceability
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Rust Tour
            org.opencontainers.image.description=Interactive Rust learning platform
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.vendor=Rust Tour
            org.opencontainers.image.licenses=MIT OR Apache-2.0

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ steps.dockerfile.outputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test release image
        run: |
          echo "Testing release image..."
          
          # Test the specific version
          docker run --rm -d \
            --name rust-tour-release-test \
            -p 3002:3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:3002/health || exit 1
          echo "Health check passed"
          
          # Test main page
          curl -f http://localhost:3002/ || exit 1
          echo "Main page accessible"
          
          # Cleanup
          docker stop rust-tour-release-test
          
          echo "Release image v${{ steps.version.outputs.version }} tested successfully"

  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    needs: build-binaries
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Node.js and build web assets
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Build web frontend
        run: |
          cd web
          npm ci
          npm run build

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --package rust-tour

  attach-binaries:
    name: Attach Binaries to Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-and-publish]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Update GitHub Release with binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: artifacts/**/*
          body: |
            ## Installation Options

            ### Docker (Recommended)
            ```bash
            docker run -d -p 3000:3000 -v $(pwd)/progress:/app/progress ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
            ```

            ### Cargo
            ```bash
            cargo install rust-tour
            ```

            ### Binary Downloads
            Download the appropriate binary for your platform from the assets below.

  update-documentation:
    name: Update Release Documentation
    needs: build-and-publish
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update docker-compose.ghcr.yml with latest version
        run: |
          sed -i 's|ghcr.io/ghanithan/rust-tour:.*|ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}|' docker-compose.ghcr.yml
          
          # Also update latest reference in comments
          sed -i 's|# - latest.*|# - latest (v${{ steps.version.outputs.version }})|' docker-compose.ghcr.yml

      - name: Commit documentation updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No documentation changes needed"
          else
            git add docker-compose.ghcr.yml
            git commit -m "docs: update GHCR references to v${{ steps.version.outputs.version }}"
            git push origin main
          fi

  release-summary:
    name: Release Summary
    needs: [build-and-publish]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release summary
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Release build summary
            echo "## Release v${{ steps.version.outputs.version }} Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-publish.result }}" == "success" ]; then
              echo "### Release Build Complete" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:latest\` (production)" >> $GITHUB_STEP_SUMMARY
              echo "- \`ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Binaries:** Attached to GitHub release" >> $GITHUB_STEP_SUMMARY
              echo "**Cargo:** Published to crates.io" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Release Build Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 3000:3000 -v \$(pwd)/progress:/app/progress ghcr.io/ghanithan/rust-tour:v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            # Main branch build summary
            echo "## Development Build Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-publish.result }}" == "success" ]; then
              echo "### Main Branch Docker Image Updated" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Docker Image:** \`ghcr.io/ghanithan/rust-tour:main\` (development)" >> $GITHUB_STEP_SUMMARY
              echo "**Build Type:** Fast development build with separate web assets" >> $GITHUB_STEP_SUMMARY
              echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Development Build Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Try Latest Development Version" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 3000:3000 -v \$(pwd)/progress:/app/progress ghcr.io/ghanithan/rust-tour:main" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi