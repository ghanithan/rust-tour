name: Build Base Image

on:
  workflow_dispatch:
    inputs:
      rust_version:
        description: 'Rust version to build (e.g., 1.84)'
        required: false
        default: '1.84'
  schedule:
    # Build weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    paths:
      - 'Dockerfile.base-alpine'
      - '.github/workflows/base-image.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/base

jobs:
  build-base:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Rust version
        id: rust_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.rust_version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from Dockerfile
            RUST_VERSION=$(grep "^FROM rust:" Dockerfile.base-alpine | sed 's/FROM rust:\([0-9.]*\).*/\1/')
            echo "version=${RUST_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Alpine + Rust version tag
            type=raw,value=alpine-rust-${{ steps.rust_version.outputs.version }}
            # Latest alpine tag
            type=raw,value=alpine-latest
            # Date-based tag for tracking
            type=raw,value=alpine-rust-${{ steps.rust_version.outputs.version }}-{{date 'YYYYMMDD'}}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base-alpine
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-latest
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test base image
        run: |
          echo "Testing base image..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-rust-${{ steps.rust_version.outputs.version }} sh -c "
            echo '=== Rust Version ===' && rustc --version &&
            echo '=== Cargo Version ===' && cargo --version &&
            echo '=== Cargo Chef Version ===' && cargo-chef --version &&
            echo '=== Build Tools ===' && gcc --version | head -1 &&
            echo '=== Git Version ===' && git --version
          "

      - name: Generate summary
        run: |
          echo "## Base Image Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-rust-${{ steps.rust_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Rust Version:** ${{ steps.rust_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage in Dockerfile:" >> $GITHUB_STEP_SUMMARY
          echo '```dockerfile' >> $GITHUB_STEP_SUMMARY
          echo "FROM ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-rust-${{ steps.rust_version.outputs.version }} AS chef" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY